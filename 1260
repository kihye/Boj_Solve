#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

// DFS와 BFS : DFS, BFS를 구현하여 방문 순서를 출력하는 문제
// vector를 배열로 사용하기 때문에 완전한 양방향 데이터를 통한 탐색을 위해서 받은 데이터를 정점마다 다 정렬해준다.
// 정렬해주는 이유는 작은 수부터 탐색을 해야한다는 규칙 때문이다.
// 자료구조 특성에 관한 특이사항을 제외하곤 기초적인 탐색 구현 문제

vector<int> arr[10002];
bool check[1002];

void dfs(int x)
{
	check[x] = true;
	cout << x << " ";
	for (int i = 0; i < arr[x].size(); i++)
	{
		int y = arr[x][i];
		if (!check[y])
			dfs(y);
	}
}
void bfs(int st)
{
	queue<int> q;
	q.push(st);
	check[st] = true;

	while (!q.empty())
	{
		int x = q.front();
		q.pop();
		cout << x << " ";
		for (int i = 0; i < arr[x].size(); i++)
		{
			int y = arr[x][i];
			if (!check[y])
			{
				q.push(y);
				check[y] = true;
			}
		}
	}
}
int main(void)
{
	int n, m, v;
	
	cin >> n >> m >> v;
	for (int i = 0; i < m; i++)
	{
		int x, y;
		cin >> x >> y;
		arr[x].push_back(y);
		arr[y].push_back(x);
	}
	for (int i = 1; i < 1002; i++)
	{
		if (!arr[i].empty())
			sort(arr[i].begin(), arr[i].end());
	}
	dfs(v);
	cout << endl;
	for (int i = 0; i < 1002; i++)
	{
		check[i] = false;
	}
	bfs(v);
}
