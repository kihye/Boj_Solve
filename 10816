#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
// 숫자 카드 2 : 정렬과 이분탐색을 이용하여 시간복잡도를 최대한 줄여 탐색하는 것을 구현
// c++은 ios::sync_with_stdio(false), cin.tie(0)을 써주지 않으면 뭘 해도 시간초과가 뜬다.
// upper_bound와 lower_bound가 구현된 게 있기에 따로 구현하지 않고 바로 사용해서 문제를 풀었다.
// 이분탐색의 기능을 잘라둔 것이기 때문에 가진 데이터를 정렬해주어야 한다.
int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n , m;
	cin >> n;
	vector<int> have(n);
	for (int i = 0; i < n; i++)
	{
		cin >> have[i];
	}
	sort(have.begin(), have.end());
	cin >> m;
	for (int i = 0; i < m; i++)
	{
		int target;
		cin >> target;
		auto upper = upper_bound(have.begin(), have.end(), target);
		auto lower = lower_bound(have.begin(), have.end(), target);

		cout << upper - lower << " ";
	}
}
