#include <iostream>
using namespace std;

// 선분 교차 1 : 특수한 상황 고려하지 않고 오로지 선분이 교차하는지만 확인
// CCW를 통해 풀이. 구한 벡터의 방향이 각각 반대라면 지정한 선분은 교차한다고 볼 수 있다.
// v1 = p2 - p1, v2 = p3 - p1, v3 = p4 - p1의 경우에서 결과가 나오지 않는 것을 고려,
// v4 = p4 - p3, v5 = p2 - p3, v6 = p1 - p3의 경우에서도 탐색해봐야 한다.
typedef long long ll;
struct point
{
	ll x, y;
};
ll CCW(point p1, point p2, point p3)
{
	ll dir = (p1.x * p2.y) + (p2.x * p3.y) + (p3.x * p1.y)
		- (p2.x * p1.y) - (p3.x * p2.y) - (p1.x * p3.y);
	if (dir > 0)
		return 1;
	else if (dir < 0)
		return -1;

	return 0;
}
int main(void)
{
	point p[4];
	for (int i = 0; i < 4; i++)
	{
		cin >> p[i].x >> p[i].y;
	}
	if (CCW(p[0], p[1], p[2]) * CCW(p[0], p[1], p[3]) <= 0 && CCW(p[2], p[3], p[0]) * CCW(p[2], p[3], p[1]) <= 0)
	{
		cout << 1;
	}
	else
	{
		cout << 0;
	}
}
